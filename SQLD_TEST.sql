CREATE TABLE TAB1(
	SAL NUMBER
);

INSERT INTO TAB1(SAL) VALUES(3000);
INSERT INTO TAB1(SAL) VALUES(3500);
INSERT INTO TAB1(SAL) VALUES(4000);
INSERT INTO TAB1(SAL) VALUES(4200);
INSERT INTO TAB1(SAL) VALUES(6000);

SELECT * FROM TAB1;

SELECT SUM(DECODE(SIGN(SAL-4000),1,1,0)) FROM TAB1;

DROP TABLE TAB1;

CREATE TABLE TAB1(
	COL1 NUMBER,
	COL2 CHAR(1)
);
INSERT INTO TAB1(COL1,COL2) VALUES(1,'A');
INSERT INTO TAB1(COL1) VALUES(2);
INSERT INTO TAB1(COL1,COL2) VALUES(3,'B');
INSERT INTO TAB1(COL1,COL2) VALUES(4,'C');
SELECT * FROM TAB1;

CREATE TABLE TAB2(
	COL1 NUMBER,
	COL2 CHAR(1)
);
INSERT INTO TAB2(COL1,COL2) VALUES(1,'A');
INSERT INTO TAB2(COL1) VALUES(2);
INSERT INTO TAB2(COL1,COL2) VALUES(3,'B');

SELECT SUM(A.COL1) FROM TAB1 A, TAB2 B WHERE A.COL2 <> B.COL2;

SELECT TO_CHAR(TO_DATE('2023.01.10 10', 'YYYY.MM.DD HH24') + 1/24/(60/10), 'YYYY.MM.DD HH24:MI:SS') FROM DUAL;

CREATE TABLE 서비스(
	서비스번호 VARCHAR2(10) PRIMARY KEY,
	서비스명 VARCHAR2(100) NULL,
	개시일자 DATE NOT NULL
);
INSERT INTO 서비스 VALUES('999','','2015-11-11');

SELECT * FROM 서비스 WHERE 서비스번호 = 1;

CREATE TABLE TABLE_A(
	TABKEY NUMBER,
	COLA NUMBER,
	COLB VARCHAR2(10),
	COLC NUMBER
);

INSERT INTO TABLE_A VALUES(1,NULL,'가',NULL);
INSERT INTO TABLE_A VALUES(2,1,'가',5);
INSERT INTO TABLE_A VALUES(3,NULL,'나',2);
INSERT INTO TABLE_A VALUES(4,3,'나',0);
INSERT INTO TABLE_A VALUES(5,NULL,NULL,3);
INSERT INTO TABLE_A VALUES(6,5,'다',0);
INSERT INTO TABLE_A VALUES(7,NULL,'다',NULL);

SELECT COLB
	,MAX(COLA) AS COLA1
	,MIN(COLA) AS COLA2
	,SUM(COLA + COLC) AS SUMAC
FROM TABLE_A
GROUP BY COLB;


SELECT TO_CHAR(TO_DATE('2019.02.25', 'YYYY.MM.DD') +
1/24/60, 'YYYY.MM.DD HH24:MI:SS') FROM DUAL;

-- 문자열 위치 리턴
-- 1번 부터 시작 2번째 발견되는 # 위치 숫자리턴
-- 뒤 1번째 부터 왼쪽으로 2번째 발견되는 # 위치 리턴
SELECT INSTR('ASDD##SSD', '#') FROM DUAL;
SELECT INSTR('ASDD##SSD', '#', 1, 2) FROM DUAL;
SELECT INSTR('ASDD##SSD', '#', -1, 2) FROM DUAL;

-- 문자열 2번째 부터 4번째 자리까지 리턴
-- -5 뒤에서 5번째부터 오른쪽으로 4번째 까지 리턴
SELECT SUBSTR('@@#DASD#@##', 2, 4) FROM DUAL;
SELECT SUBSTR('@@#DASD#@##', -5, 4) FROM DUAL;

-- 문자열 합치기('', '') 인수가 두개뿐 그이상 에러
SELECT CONCAT('2','WEWEW') FROM DUAL;

-- 변환 문자열 작성 없을시 삭제
-- 변환 문자열 전체적으로 서로 바뀜
-- ABABCDE -> LOVELOVECDE
SELECT REPLACE('ABABCDE','AB') FROM DUAL;
SELECT REPLACE('ABABCDE','AB', 'LOVE') FROM DUAL;

-- 1대1 문자열 치환
-- AB두글자만 변환 해서 LO로만 바꾸거나
-- AB두글자인데 L한글자로만 변환
SELECT TRANSLATE('ABABCDE', 'AB', 'LOVE') FROM DUAL;
SELECT TRANSLATE('ABABCDE', 'AB', 'L') FROM DUAL;\

-- 절대값
SELECT ABS(-5000) FROM DUAL;
SELECT ABS(3) FROM DUAL;

-- 음수면 -1 양수 1 0은 0 리턴
SELECT SIGN(-22) FROM DUAL;
SELECT SIGN(2) FROM DUAL;
SELECT SIGN(0) FROM DUAL;

--  작거나 같은 최소정수
SELECT FLOOR(3.9) FROM DUAL;

-- 크거나 같은 최소 정수 리턴
SELECT CEIL(3.1) FROM DUAL;

-- 나눈 나머지
SELECT MOD(2, 1) FROM DUAL;
SELECT MOD(10, 3) FROM DUAL;
SELECT MOD(20, 7) FROM DUAL;

--  거듭제곱
SELECT POWER(2, 4) FROM DUAL;
SELECT POWER(2, 9) FROM DUAL;

-- 소수점 특정자리에서 소수 버림 0하면 다버림
SELECT TRUNC(123.4422222, 2) FROM DUAL;
SELECT TRUNC(123.4422222, 1) FROM DUAL;
SELECT TRUNC(123.4422222, 5) FROM DUAL;
SELECT TRUNC(123.4422222, 0) FROM DUAL;

SELECT * FROM EMPLOYEE;

SELECT DEPT_NAME, COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_NAME;

SELECT DECODE(DEPT_NAME, '개발부', 'A', NULL)
FROM EMPLOYEE
GROUP BY DEPT_NAME;

SELECT COALESCE(NULL, NULL, NULL, NULL, 5, 3) FROM DUAL;

SELECT NULLIF(2, NULL) FROM DUAL;
SELECT NULLIF(2, 2) FROM DUAL;

SELECT 
	CASE WHEN DEPT_NAME = 
	'개발부' THEN '개발자래요' ELSE '아니래요'
	END AS "CASE"
FROM EMPLOYEE;

SELECT DEPT_NAME
FROM EMPLOYEE
WHERE DEPT_NAME LIKE '%발_';

SELECT ROUND(23123.42323232,1) FROM DUAL;
SELECT ROUND(23123.42323232) FROM DUAL;

SELECT M.MAJOR_NAME, S.STD_NAME
FROM STUDENT S, MAJOR M
WHERE S.MAJOR_NO = M.MAJOR_NO;

SELECT S.STD_NO, S.STD_NAME, M.MAJOR_NAME
FROM STUDENT S INNER JOIN MAJOR M
USING(MAJOR_NO);

SELECT M1.MAJOR_NAME, M1.MAJOR_NO, M2.MAJOR_NAME, S.STD_NAME
FROM MAJOR M1, MAJOR M2, STUDENT S
WHERE M1.MAJOR_NO = M2.MAJOR_NO
AND M1.MAJOR_NO = S.MAJOR_NO;

CREATE TABLE TT1(
	T_NUMBER NUMBER,
	T_NAME CHAR(1)
);
CREATE TABLE TT2(
	T_NUMBER NUMBER,
	T_NAME CHAR(1)
);

INSERT INTO TT1 (T_NUMBER, T_NAME) VALUES(1, 'A');
INSERT INTO TT1 (T_NUMBER, T_NAME) VALUES(1, 'B');
INSERT INTO TT1 (T_NUMBER, T_NAME) VALUES(2, 'B');
INSERT INTO TT1 (T_NUMBER, T_NAME) VALUES(3, 'C');
INSERT INTO TT1 (T_NUMBER, T_NAME) VALUES(NULL, 'C');

INSERT INTO TT2 (T_NUMBER, T_NAME) VALUES(1, 'A');
INSERT INTO TT2 (T_NUMBER, T_NAME) VALUES(1, 'B');
INSERT INTO TT2 (T_NUMBER, T_NAME) VALUES(2, 'C');
INSERT INTO TT2 (T_NUMBER, T_NAME) VALUES(3, 'C');
INSERT INTO TT2 (T_NUMBER, T_NAME) VALUES(NULL, 'C');

SELECT *
FROM TT1 NATURAL JOIN TT2;

SELECT *
FROM TT1 CROSS JOIN TT2;

SELECT *
FROM TT1 T1 FULL OUTER JOIN TT2 T2
ON T1.T_NUMBER = T2.T_NUMBER;
